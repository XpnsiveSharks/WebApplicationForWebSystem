<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed CSS and HTML</title>
    <style>
        html {
            color: #454545;
            font-size: 1em;
            line-height: 1.4;
            font-family: 'Open Sans', sans-serif;
            font-weight: 400;
        }

        /* Global heading styles */
        h1, h2, h3, h4, h5, h6 {
            letter-spacing: 3px;
            text-rendering: geometricPrecision;
            text-transform: uppercase;
            font-family: 'Fira Sans', sans-serif;
            font-weight: 300;
        }

        h1 {
            font-size: 2rem;
        }

        h2 {
            font-size: 1.375rem;
        }

        #title-section h1 {
            text-align: center;
            font-size: 3rem;
        }

        .dark {
            overflow: hidden;
        }

            .dark .slant-outer {
                background: #906ccd;
                margin: 0 -100px;
            }

            .dark .slant-inner {
                background: #454545;
                height: 100%;
            }

            .dark .content-wrapper {
                margin: 0 100px;
                color: white;
                display: block;
                padding: 30px 0 60px;
            }

                .dark .content-wrapper .content {
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 0 1rem;
                }
    </style>
</head>
<body>
    <div class="site-container">
        <section id="title-section">
            <h1>Double Angled Content Sections!</h1>
        </section>
        <section id="main-event" class="dark">
            <div class="content">
                <h1>Content</h1>
                <p>
                    Vivamus sagittis lacus vel augue laoreet rutrum faucibus. Fabio vel iudice vincam, sunt in culpa qui officia. Gallia est omnis divisa in partes tres, quarum. Petierunt uti sibi concilium totius Galliae in diem certam indicere.
                </p>
            </div>
        </section>
    </div>
    <script>
        var Helper = {
            toRadians: function (rotation) {
                var y = (rotation * Math.PI) / 180;
                return y;
            },
        };

        var DarkSection = {
            /**
             * Values
             */
            // Settings for display of rotation
            config: {
                // Set ratio between .outer-slant and .inner-slant
                rotationRatio: 0.375,
                // Set minimum and maximum rotation.
                minRotation: 8,
                maxRotation: 18,
                // Set minimum and maximum width for min & max rotation values to be applied at.
                minWidth: 320,
                maxWidth: 1440
            },
            // For storing rotation values
            rotation: {},
            // Number of times elements had wrappers added to them.
            numWrappers: '',
            // Slant padding. Use this for any negative padding needed for backgrounds.
            slantHeight: '',

            /**
             * Methods
             */
            init: function () {
                var windowWidth = $(window).width();
                this.injectWrappersToHTML();
                // Window resize event.
                $(window).resize(function () {
                    // Update window width.
                    windowWidth = $(window).width();
                    // Update Rotations.
                    DarkSection.setRotations(windowWidth);
                    // Update Padding.
                    DarkSection.setPaddings(windowWidth);
                });
                this.setRotations(windowWidth);
                this.setPaddings(windowWidth);
            },

            /**
             * Add wrapper elements to div.content within a .dark element.
             * This function should only be called once on page load.
             */
            injectWrappersToHTML: function () {
                // wrapping elements (this is for easy editing).
                this.numWrappers = 0;

                if ($('.dark:has(.content)')) {
                    $('.dark .content').wrap(function (i) {
                        DarkSection.numWrappers++;
                        var num = i + 1;
                        var wrappers = [
                            '<div class="slant-outer" data-darksection="' + num + '">',
                            '<div class="slant-inner">',
                            '<div class="content-wrapper">',
                            '</div></div></div>'
                        ];
                        var output = wrappers.join('');
                        return output;
                    });
                }
            },

            getRotation: function (width) {
                // set for later
                var rotation;
                // Get ratio for degrees per pixel of width.
                var rotationSteps = (this.config.maxRotation - this.config.minRotation) / (this.config.maxWidth - this.config.minWidth);

                // If viewport width is below minimum set width, rotation is set to max.
                // Else if viewport width is above maximum set width, rotation is set to min.
                // Else ratio is applied to calculate rotation based on width of viewport.
                if (width <= this.config.minWidth) {
                    rotation = this.config.maxRotation;
                } else if (width >= this.config.maxWidth) {
                    rotation = this.config.minRotation;
                } else {
                    rotation = this.config.maxRotation - ((width - this.config.minWidth) * rotationSteps);
                }
                var radians = Helper.toRadians(rotation);
                // Set values in rotation object.
                this.rotation = {
                    outer: rotation,
                    outerRadian: radians,
                    inner: rotation * this.config.rotationRatio,
                    content: rotation - (rotation * this.config.rotationRatio),
                };
            },

            getOuterSlantPadding: function (width) {
                // Get angles.
                var angleA = this.rotation.outer;
                var angleB = angleA - (angleA * (1 - this.config.rotationRatio));
                // Get radians from angles.
                var radianA = this.rotation.outerRadian;
                var radianB = Helper.toRadians(angleB);
                // Get correct padding.
                var padding = Math.tan(radianB) * (Math.cos(radianA) * (width / 2));
                return padding;
            },

            getOuterSlantWidth: function (width, height) {
                var radianA = this.rotation.outerRadian;
                // Fig 2. AC = cos(<BAC) * AB.
                var visibleWidth = Math.cos(radianA) * width;
                // Fig 1. AC = sin(<ABC) * BA.
                // Fig 1. AD = cos(<CAD) * AC.
                var widthToAdd = Math.cos(radianA) * (Math.sin(radianA) * height);
                // Get the true width of the rectangle.
                var trueWidth = visibleWidth + widthToAdd + widthToAdd;
                return trueWidth;
            },

            getSectionPadding: function (width, height) {
                var radianA = this.rotation.outerRadian;
                // Get width of rotated rectangle.
                var sectionWidth = this.getOuterSlantWidth(width, height);
                // Use this to store in accessible object value.
                var slantHeight = sectionWidth * Math.sin(radianA);
                // Get section height.
                var rotatedHeight = slantHeight + height * Math.cos(radianA);
                // Convert the new height into a usable padding value.
                var padding = (rotatedHeight - height) / 2;
                this.slantHeight = slantHeight;
                return padding;
            },

            setRotations: function (width) {
                this.getRotation(width);
                var rotation = this.rotation;
                $('.slant-outer').css("transform", "rotate(" + rotation.outer + "deg)");
                $('.slant-inner').css("transform", "rotate(-" + rotation.inner + "deg)");
                $('.content-wrapper').css("transform", "rotate(-" + rotation.content + "deg)");
            },

            setPaddings: function (width) {
                // Get window width.
                // var width = $(window).width();
                // Get .slant-outer padding.
                var outerSlantPadding = this.getOuterSlantPadding(width);
                // Set .slant-outer padding.
                $('.slant-outer').css({ "padding-top": outerSlantPadding, "padding-bottom": outerSlantPadding });

                // Loop through .dark sections and apply padding individually.
                for (var i = 0; i < this.numWrappers; i++) {
                    // Use these vars to set up a way to target .dark sections individually.
                    var num = i + 1;
                    var target = '[data-darksection="' + num + '"]';
                    // Get height of rectangle for use in section padding function.
                    var height = $(target).parent().height();
                    // Get section padding using section height and window width.
                    var sectionPadding = this.getSectionPadding(width, height);
                    // Set .dark section padding to make up for incorrect height returned from CSS.
                    $(target).parent().css({ "padding-top": sectionPadding, "padding-bottom": sectionPadding });
                }
            },
        };

        $(document).ready(function () {
            DarkSection.init();
        });
    </script>
